{"version":3,"sources":["../source/RelativeTimeFormat.test.js"],"names":["describe","it","rtf","expect","format","to","equal","throw","formatToParts","deep","type","value","supportedLocalesOf","timeZone","resolvedOptions","locale"],"mappings":"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","file":"RelativeTimeFormat.test.js","sourcesContent":["import en from '../locale/en'\r\nimport ru from '../locale/ru'\r\nimport to from '../locale/to'\r\n\r\nimport RelativeTimeFormat, { loadLocale } from './RelativeTimeFormat'\r\n\r\nloadLocale(en)\r\nloadLocale(ru)\r\nloadLocale(to)\r\n\r\ndescribe('Intl.RelativeTimeFormat', () => {\r\n  it('should format relative time', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n    expect(rtf.format(2.15, \"day\")).to.equal(\"in 2.15 days\")\r\n    expect(rtf.format(100, \"day\")).to.equal(\"in 100 days\")\r\n\r\n    // expect(rtf.format(0, \"day\")).to.equal(\"today\")\r\n    // expect(rtf.format(-0, \"day\")).to.equal(\"today\")\r\n  })\r\n\r\n  it('should throw if a time unit is unsupported', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(() => rtf.format(-1, \"decade\")).to.throw(\"Unknown time unit: decade.\")\r\n  })\r\n\r\n  // it('should format yesterday/today/tomorrow', () => {\r\n  //   const rtf = new RelativeTimeFormat(\"en\")\r\n  //\r\n  //   // \"today\" is useless for relative time labels.\r\n  //   // E.g. for `23:59:00` \"today\" is too vague.\r\n  //   // And for `00:01:00` \"today\" is counter-intuitive.\r\n  //   // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n  //   // E.g. \"yesterday\" of `00:01` is misleading.\r\n  //   // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n  //   // Not to mention that both of them are too \"vague\", same as \"today\".\r\n  //   // Also there are no rules defining when to use\r\n  //   // \"yesterday\", \"today\" and \"tomorrow\".\r\n  //   // The algorythm should take local time into account.\r\n  //\r\n  //   expect(rtf.format(-1, \"day\")).to.equal(\"yesterday\")\r\n  //   expect(rtf.format(0, \"day\")).to.equal(\"today\")\r\n  //   expect(rtf.format(1, \"day\")).to.equal(\"tomorrow\")\r\n  // })\r\n\r\n  it('should accept an array of locales', () => {\r\n    const rtf = new RelativeTimeFormat([\"en\"])\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should resolve locales as \"best fit\"', () => {\r\n    const rtf = new RelativeTimeFormat('en-XX')\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should fallback to default system locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should format to parts', () => {\r\n    let rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \"},\r\n      { type: \"day\", value: \"100\"},\r\n      { type: \"literal\", value: \" days\"}\r\n    ])\r\n\r\n    expect(rtf.formatToParts(-100, \"day\")).to.deep.equal([\r\n      { type: \"day\", value: \"100\"},\r\n      { type: \"literal\", value: \" days ago\"}\r\n    ])\r\n\r\n    rtf = new RelativeTimeFormat(\"to\")\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"ʻi he ʻaho ʻe \"},\r\n      { type: \"day\", value: \"100\"}\r\n    ])\r\n  })\r\n\r\n  it('should list supported locales', function() {\r\n    expect(RelativeTimeFormat.supportedLocalesOf(['es-ES', 'ru', 'ru-XX', 'en-GB']))\r\n      .to.deep.equal(['ru', 'ru-XX', 'en-GB'])\r\n  })\r\n\r\n  it('should show resolved options', function() {\r\n    expect(new RelativeTimeFormat('ru-XX', { timeZone: 'UTC' }).resolvedOptions()).to.deep.equal({\r\n      locale: \"ru\"\r\n    })\r\n  })\r\n})"]}